From edd00cde2d8fbeccd6f028570b1fcbdadbba1af5 Mon Sep 17 00:00:00 2001
From: ABANOUB AWAD <ada80@pwd.cs.rutgers.edu>
Date: Wed, 11 Mar 2015 22:58:52 -0400
Subject: [PATCH 1/4] stage one completed

---
 Makefile        |    2 ++
 proc.h          |    2 ++
 restorer.h      |    1 +
 signal.h        |   13 +++++++++++++
 stage1_test.c   |   28 ++++++++++++++++++++++++++++
 stage2_timing.c |   20 ++++++++++++++++++++
 stage3_test.c   |   33 +++++++++++++++++++++++++++++++++
 syscall.c       |    2 ++
 syscall.h       |    1 +
 sysproc.c       |   22 ++++++++++++++++++++++
 trap.c          |   23 ++++++++++++++++++++++-
 user.h          |    1 +
 usys.S          |    1 +
 13 files changed, 148 insertions(+), 1 deletion(-)
 create mode 100644 restorer.h
 create mode 100644 signal.h
 create mode 100644 stage1_test.c
 create mode 100644 stage2_timing.c
 create mode 100644 stage3_test.c

diff --git a/Makefile b/Makefile
index dd144a3..91636a6 100644
--- a/Makefile
+++ b/Makefile
@@ -173,6 +173,8 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_shutdown\
+	_stage1_test\
+	_stage2_timing\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.h b/proc.h
index 3b9c3ac..27a9c45 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int *signal_handler_addr[32];// Signal handler addresses for each signal defined in signal.h respectively
+ // int *signal_handler_signum_addr[32]; //signal handler address for the signal which caused the signal
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/restorer.h b/restorer.h
new file mode 100644
index 0000000..76a1736
--- /dev/null
+++ b/restorer.h
@@ -0,0 +1 @@
+// You must define an inline asm function here to solve stage3.
diff --git a/signal.h b/signal.h
new file mode 100644
index 0000000..c9465ae
--- /dev/null
+++ b/signal.h
@@ -0,0 +1,13 @@
+#ifndef XV6_SIGNAL
+#define XV6_SIGNAL
+
+// You should define anything signal related that needs to be shared between
+// kernel and userspace here
+
+// At a minimum you must define the signal constants themselves
+// as well as a sighandler_t type.
+
+#define SIGFPE 0
+typedef void (*signalhandler_t)(int);
+
+#endif
diff --git a/stage1_test.c b/stage1_test.c
new file mode 100644
index 0000000..1fd135c
--- /dev/null
+++ b/stage1_test.c
@@ -0,0 +1,28 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "signal.h"
+
+void handle_signal(int signum)
+{
+	printf(1, "Caught signal %d...\n", signum);
+	if (signum == SIGFPE)
+		printf(1, "TEST PASSED\n");
+	else
+		printf(1, "TEST FAILED: wrong signal sent.\n");
+	exit();
+}
+
+int main(int argc, char *argv[])
+{
+	int x = 5;
+	int y = 0;
+
+	signal(SIGFPE, handle_signal);
+
+	x = x / y;
+
+	printf(1, "TEST FAILED: no signal sent.\n");
+	
+	exit();
+}
diff --git a/stage2_timing.c b/stage2_timing.c
new file mode 100644
index 0000000..f5462f5
--- /dev/null
+++ b/stage2_timing.c
@@ -0,0 +1,20 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "signal.h"
+
+void handle_signal(int signum)
+{
+
+}
+
+int main(int argc, char *argv[])
+{
+	signal(SIGFPE, handle_signal);
+	
+	printf(1, "Traps Performed: XXXX\n");
+	printf(1, "Total Elapsed Time: XXXX\n");
+	printf(1, "Average Time Per Trap: XXXXX\n");
+
+	exit();
+}
\ No newline at end of file
diff --git a/stage3_test.c b/stage3_test.c
new file mode 100644
index 0000000..e4ad494
--- /dev/null
+++ b/stage3_test.c
@@ -0,0 +1,33 @@
+#include "types.h"
+#include "user.h"
+#include "signal.h"
+
+// You must implement your restorer function in restorer.h
+#include "restorer.h"
+
+void handle_signal(int signum)
+{
+    __asm__ ("movl $0x0,%ecx\n\t");
+	// Add your code to skip the return ip here
+} 
+
+int main(void)
+{
+    register int ecx asm ("%ecx");
+    
+    signal(-1, (sighandler_t) restorer);   // save the address of restorer function inside the kernel.
+    signal(SIGFPE, handle_signal);         // register the actual signal for divide by zero.
+
+    int x = 5;
+    int y = 0;
+
+    ecx = 5;
+    x = x / y;
+
+    if (ecx == 5)
+        printf(1, "TEST PASSED: Final value of ecx is %d...\n", ecx);
+    else
+        printf(1, "TEST FAILED: Final value of ecx is %d...\n", ecx);
+
+    exit();
+}
diff --git a/syscall.c b/syscall.c
index 541cbfc..ab9c59f 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_halt(void);
+extern int sys_signal(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_halt]    sys_halt,
+[SYS_signal]  sys_signal,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 9edcf12..86ed0ae 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_halt   22
+#define SYS_signal 23
diff --git a/sysproc.c b/sysproc.c
index 459c879..0b95857 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "signal.h"
 
 int
 sys_fork(void)
@@ -102,3 +103,24 @@ sys_halt(void)
     outw(0xB004, 0x2000);
   return 0;
 }
+
+int
+sys_signal(void)
+{
+  int signum;
+  int handler_addr;
+  signum = -1;
+  handler_addr = 0;
+
+  if(argint(0,&signum) < 0) {
+	  return -1;
+  }
+  if(argint(1, &handler_addr) < 0) {
+	  return -1;
+  }
+  //cprintf("inside sysproc.c -> signum = %d handler_addr = %x\n", signum, handler_addr);
+
+  proc->signal_handler_addr[signum] = (int *)handler_addr;
+//  proc->signal_handler_addr[signum] = &signum;
+  return 0;
+}
diff --git a/trap.c b/trap.c
index 3f80145..68367d0 100644
--- a/trap.c
+++ b/trap.c
@@ -77,7 +77,28 @@ trap(struct trapframe *tf)
             cpu->id, tf->cs, tf->eip);
     lapiceoi();
     break;
-   
+  case T_DIVIDE:
+	  ;
+	 /*Switch to handler code*/
+	 /*save the old instruction pointer so we can return to user code after handling divide error*/
+	 uint old_eip = tf->eip;
+
+
+	 tf->eip = (uint)proc->signal_handler_addr[0]; /*set the instruction pointer to the address of the divide by 0 handler*/
+
+	 int *handler_param_ptr = (int *)(tf->esp-4); /*put the parameter for the handler on the stack (signum = 0 for divide by 0)*/
+	 int index = 0;
+	 *handler_param_ptr = index;
+	// cprintf("INSIDE TRAP.C........*(proc->signal_handler_signum_addr[0] = %d\n", *(proc->signal_handler_signum_addr[0]));
+
+	 //*handler_param_ptr = *(proc->signal_handler_signum_addr[0]);
+
+	 int *return_addr_ptr = (int *)(tf->esp-8); /*return address of the handler is the address of the offending instruction, the old_eip*/
+	 *return_addr_ptr = old_eip;
+	// cprintf("INSIDE TRAP.C.........ADDRESS OF OFFENDING INSTRUCTION = %x\n", old_eip);
+
+	 tf->esp = tf->esp-8; /*move esp to the new top of the stack (we put activation record for handler on the stack)*/
+	 break;
   //PAGEBREAK: 13
   default:
     if(proc == 0 || (tf->cs&3) == 0){
diff --git a/user.h b/user.h
index 20f3361..68d0d4e 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int halt(void);
+int signal(int, void (*signalhandler_t)(int));
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 0d4eaed..edde018 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(halt)
+SYSCALL(signal)
-- 
1.7.9.6

